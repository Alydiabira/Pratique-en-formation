<style>
	h2 {
		text-align: center;
		font-size: 25px;
		font-weight: bold;
		color: white;
		background-color: green;
	}
	h3 {
		text-align: center;
		font-size: 20px;
		color: goldenrod;
	}

	ol{
		text-align: center;
	}

	ol a{
		text-decoration: none;
		color: palevioletred;
		font-weight: bold;
		font-size: 20px;
	}

	ol a:hover{
		color: orangered;
		font-style: italic;
	}
</style>

<ol>
			<li><a href="#part1">Ecriture et affichage</a></li>
			<li><a href="#part2">Variables : Types / D√©claration / Affectation</a></li>
			<li><a href="#part3">Concat√©nation</a></li>
			<li><a href="#part4">Guillemets et Quotes</a></li>
			<li><a href="#part5">Constantes et Constantes magiques</a></li>
			<li><a href="#part6">Op√©rateurs arithm√©tiques</a></li>
			<li><a href="#part7">Structures conditionnelles (if/else) - op√©rateurs de comparaisons</a></li>
			<li><a href="#part8">Condition Switch</a></li>
			<li><a href="#part9">Fonctions pr√©d√©finies</a></li>
			<li><a href="#part10">Fonctions utilisateur</a></li>
			<li><a href="#part11">Structures it√©ratives : boucles</a></li>
			<li><a href="#part12">Inclusions de fichiers</a></li>
			<li><a href="#part13">Tableaux de donn√©es ARRAY</a></li>
			<li><a href="#part14">Boucle FOREACH pour les tableaux ARRAY</a></li>
			<li><a href="#part15">Tableaux mlitidimensionnels</a></li>
			<li><a href="#part16">Classes et Objets </a></li>
			<li><a href="#part17">Superglobales</a></li>
			<li><a href="#part18">GET</a></li>
			<li><a href="#part19">POST</a></li>
			<li><a href="#part20">COOKIES</a></li>
			<li><a href="#part21">SESSION</a></li>
			<li><a href="#part22">PDO</a></li>
		</ol>

<hr><h2 id="part1"> 1. Ecriture et affichage </h2>

<!-- Nous pouvons √©crire du HTML dans un fichier avec extension .php . L'inverse n'est pas vrai ! -->

<!-- Pour √©crire du PHP, il faut utiliser les balises PHP : -->


<?php
// balise ouvrante PHP

// Ceci un commentaire sur une ligne
/* Ceci est un commentaire sur plusieurs 
            Lignes ! */
# Ceci est aussi un commentaire sur une seule ligne

echo 'Hello World !';
// echo est une instruction qui permet d'effecture un affichage dans le navigateur

echo '<br>';
// on peut int√©grer du html dans un echo

echo 'Bienvenue ! ';
// Si on regarde le code source dans le navigateur, on ne voit rien du PHP parce que le langage est interpr√©t√©

echo '<br>';
// Tout au long du cours on utilisera les br pour la mise en page (pour rendre plus lisible), √ßa n'a rien √† voir avec PHP, c'est juste une question pratique


// balise fermante PHP
?>

<?= "Allo ???" ?>
<!-- Cette √©criture simplifi√©e permet de faire un echo sans avoir √† ouvrir les balises PHP -->

<?= "<br>" ?>
<!-- Cette √©criture ne fonctionne pas dans les balises php -->

<?php
// Quand on sait qu'on ne fera que du PHP dans un document, on peut ouvrir la balise sans la fermer

print 'Nous sommes lundi';
// Print est une autre instruction d'affichage. A notre niveau, print et echo sont totalement interchangeables. (dans les faits, echo serait un peu plus performant)
print '<br>';

// D'autres instructions d'affichages existent : print_r() et var_dump() en particulier. Mais on verra √ßa plus tard dans le cours, ce sont des outils de dev et pas des outils pour afficher pour les utilisatrices et utilisateurs.


// --------------------------------

echo '<hr><h2 id="part2"> 2. Variables : Types / D√©claration / Affectation </h2>';

// variable = espace nomm√© permettant de conserver une valeur

$a = 127; 
// D√©claration de la variable $a √† laquelle on a affect√© la valeur 127

$variable = '';
// On peut aussi d√©clarer une variable sans lui affecter de valeur, en la laissant "vide"

echo $a;
// pour afficher la variable on utilise un echo

echo "<br>";

echo gettype($a);
// gettype() est une fonction pr√©d√©finie de PHP nous permettant d'acc√©der au type d'une variable. Ici, il s'agit d'un entier : integer

echo "<br>";

$b = 1.5;
echo gettype($b); //un nombre √† virgule (double)

echo "<br>";

$c = "Nous apprenons PHP üêò";
echo gettype($c); // une chaine de caract√®res (string)

echo "<br>";

$d = '127';
echo gettype($d); //une chaine de caract√®res aussi

echo "<br>";

$a2 = TRUE;
echo gettype($a2); // un bool√©en (boolean)

echo "<br>";


$b2 = FALSE;
echo gettype($b2); // un bool√©en aussi

echo "<br>";

// ATTENTION : les variables sont sensibles √† la casse. $bonjour et $Bonjour sont deux variables diff√©rents
// On peut mettre des chiffres dans nos noms de variables, mais jamais commencer par un chiffre
// L'utilisation du camelCase est recommand√©e : $cetteVariableEstEnCamelCase
// Pour que votre code soit clair, essayez en g√©n√©ral de nommer vos variables selon ce qu'elles contiennennt : $age, $prix...


// --------------------------------


echo '<hr><h2 id="part3"> 3. Concat√©nation </h2>';


$x = "Bonjour ";
$y = "tout le monde ! ";

echo $x . $y . "<br>";
// point de concat√©nation (√©quivalent √† dire "suivi de")

echo "coucou" , " üåº", "<br>";
// la virgule peut aussi servir pour la concat√©nation

// --------------------------------

// Concat√©nation lors de l'affectation

$prenom1 = "Tic";
$prenom1 = "Tac";
echo $prenom1 . "<br>";
// En PHP on peut r√©affecter une nouvelle valeur √† une variable √† tout moment. C'est la derni√®re valeur affect√©e qui compte dans l'ordre chronologique

$prenom2 = "Tic";
$prenom2 .= " Tac";
// on peut "ajouter" une valeur √† la pr√©c√©dente gr√¢ce √† la concat√©nation lors de l'affectation

echo $prenom2 . "<br>"; // affiche Tic Tac

// --------------------------------


echo '<hr><h2 id="part4"> 4. Guillemets et Quotes </h2>';

$message = "aujourd'hui";
$message = 'aujourd\'hui';
// si on veut avoir une apostrophe dans notre chaine de caract√®re, il faut soit utiliser les guillemets (plus simple), soit les apostrophes mais en √©chappant l'apostrophe du mot gr√¢ce √† un antislash

$txt = "bonjour";

echo $txt . " tout le monde ! <br>";
// la variable affiche sa valeur comme on a vu plus haut

echo "$txt tout le monde ! <br>";
// Affichage avec les guillemets, la variable est √©valu√©e, on affiche sa valeur

echo '$txt tout le monde ! <br>';
// Affichage avec les apostrophoes/quotes, la variable n'est pas √©valu√©e, on affiche son nom


// --------------------------------


echo '<hr><h2 id="part5"> 5. Constantes et Constantes magiques </h2>';

// une constante c'est comme une variable : un espace nomm√© qui contient une valeur, sauf que contrairement √† la variable, cette valeur ne peut pas changer. 

define("CAPITALE", "Paris");
// Pour cr√©er une constante, on utilise la fonciton pr√©d√©finie define() √† laquelle on envoie deux arguments : le nom de la constante (par convention, en majuscules) et la valeur qu'on lui affecte

echo CAPITALE . "<br>";


// constantes magiques

echo __FILE__ . "<br>"; // affiche le chemin complet vers le fichier o√π on se trouve
echo __LINE__ . "<br>"; // affiche la ligne √† la quelle on se trouve dans le fichier


// Il y a 9 constantes magiques en PHP, pour en savoir plus : https://www.php.net/manual/fr/language.constants.magic.php


// --------------------------------


echo '<hr><h2 id="part6"> 6. Op√©rateurs arithm√©tiques </h2>';


$f = 10;
$g = 2;

echo $f + $g . "<br>"; //affiche 12

echo $f - $g . "<br>"; //affiche 8

echo $f * $g . "<br>"; //affiche 20

echo $f / $g . "<br>" ; //affiche 5

echo $f % $g . "<br>"; // (modulo = reste d'une division) affiche 0

echo $f ** $g . "<br>"; // (op√©rateur d'exponentation = affiche le r√©sultat d'une puissance) affiche 100


// op√©rations par affectation

$f += $g; // √©quivaut √† faire $f = $f + $g
echo $f . "<br>"; // √† partir de l√†, $f vaut 12

$f -= $g;
echo $f . "<br>"; // $f revient √† 10

$f *= $g;
echo $f . "<br>"; // $f vaut 20

$f /= $g;
echo $f . "<br>"; // $f vaut 10 √† nouveau


// --------------------------------


echo '<hr><h2 id="part7"> 7. Structures conditionnelles (if/else) - op√©rateurs de comparaison </h2>';



// Isset & Empty
// isset() teste si la variable existe  et empty() teste si la variable est vide.

$var1 = 0;
$var2 = "";

if (empty($var1)) echo "0, vide, false ou non d√©finie. <br>";
// comme $var1 vaut 0, on rentre bien dans la condition donc la chaine de caract√®re s'affiche bien

if (isset($var2)) echo "var2 existe bien ! <br>";


//---------------

//if, else elseif et op√©rateurs de comparaison

$h = 10;
$i = 5;
$j = 2;

if ($h > $i){ // si h est sup√©rieure √† i
	echo "h est bien sup√©rieure √† i <br>";
}else{ // sinon, h n'est pas sup√©rieure √† i
	echo "non c'est i qui est sup√©rieure √† h <br>";
}


if ($h < $i){
	echo "h est inf√©rieure √† i <br>";
} elseif ($i < $j){
	echo "i est inf√©rieure √† j <br>";
} else{
	echo "j est le plus petit nombre <br>";
}

if ($h > $i && $i > $j){
	echo "Okay pour les deux conditions <br>";
}
// && = AND, les deux conditions doivent √™tre vraies pour que la condition soit valide

if ($h == 9 || $i > $j){
	echo "okay pour au moins l'une des deux conditions <br>";
}

// || = OR, au moins une des deux conditions (ou les deux) doit √™tre vraie pour que le if soit valide

if ($h == 10 xor $j == 6){
	echo "okay pour la condition exclusive <br>";
}
// xor, condition exclusive, uniquement une des deux conditions doit √™tre juste pour que le if soit valide (jamais les deux)


// ----------------------
// Forme contract√©e : l'√©criture ternaire

echo ($h == 10) ? "h est √©gal √† 10 <br>" : "h n'est pas √©gal √† 10 <br>";
// l'avantage de l'√©criture ternaire : on peut la faire directement dans un echo
//  ? remplace le if et : remplace le else


// ------------------

$varA = 1;
$varB = "1";


if ($varA == $varB){
	echo "il s'agit de la m√™me chose";
}

// avec le double √©gal, PHP nous dit que les deux variables sont identiques. Avec le triple √©gal, PHP nous dit qu'elles sont diff√©rentes. Le double √©gal teste uniquement la valeur (ici, 1) et le triple √©gal teste la valeur (1) et le type (integer pour varA et string pour varB)


/* /‚ùó\ R√©capitulatif des op√©rateurs :
= 	 	Affectation (ceci n'est pas un op√©rateur de comparaison !)

== 	 	Comparaison des valeurs
!=		est diff√©rent de  (en terme de valeur)
===  	Comparaison des valeurs et du type
!==		est strictement diff√©rent de (en terme de valeur et/ou type)
>		est strictement sup√©rieur √†
<		est strictement inf√©rieur √†
>=		est sup√©rieur ou √©gal √†
<=		est inf√©rieur ou √©gal √†

*/


// --------------------------------


echo '<hr><h2 id="part8"> 8. Condition switch </h2>';


$couleur = "jaune";

switch ($couleur){
	case 'bleu':
		echo "Vous aimez le bleu. <br>";
		break; // on fait un break pour sortir du switch si on est entr√© dans un des cases
	case 'rouge':
		echo "Vous aimez le rouge <br>";
		break;
	case 'vert':
		echo "Vous aimez le vert <br>";
		break;
	default: // le cas par d√©faut, si on n'entre dans aucun cas pr√©c√©dent
		echo "Vous n'aimez ni le bleu, ni le rouge, ni le vert... <br>";
		break;
}



//------------------------------------------------------

	// EXERCICES

//------------------------------------------------------

echo'<hr> <h3> Exercice Comparaisons</h3>';


// EXERCICE : Je veux personnaliser le message d'accueil selon le pr√©nom contenu dans ma variable $prenom. Mon message sera sur la forme "Bonjour" + pr√©nom. Les personnes inscrites sur mon site sont : Farah, Sabrina et Jonathan. Au cas o√π on aurait un petit nouveau dans les inscrits, je vais mettre aussi un message possible "Bonjour nouvel-le inscrit-e !". 
// Vous pouvez utiliser le switch ou le if selon votre envie (et si vous avez le temps, faites les deux !)
// NB : en vrai d√©veloppement web, on utiliserait une fonction utilisateur pour √ßa, mais comme on n'a pas encore vu, on utilise ce qu'on conna√Æt !

$prenom = "Sabrina";

switch ($prenom){
	case "Farah":
		echo "Bonjour Farah <br>";
		break;
	case "Sabrina":
		echo "Bonjour Sabrina <br>";
		break;
	case "Jonathan":
		echo "Bonjour Jonathan <br>";
		break;
	default:
		echo "Bonjour nouvel-le inscrit-e ! <br>";
		break;
}


if($prenom == "Farah"){
	echo "Bonjour Farah <br>";
}elseif($prenom == "Sabrina"){
	echo "Bonjour Sabrina <br>";
}elseif($prenom == "Jonathan"){
	echo "Bonjour Jonathan <br>";
}else{
	echo "Bonjour nouvel-le inscrit-e ! <br>";
}

// en simplifiant ! 
if($prenom == "Farah" || $prenom == "Sabrina" || $prenom == 'Jonathan'){
	echo "Bonjour $prenom <br>";
}else{
	echo "Bonjour nouvel-le inscrit-e ! <br>";
}


// --------------------------------


echo '<hr><h2 id="part9"> 9. Fonctions pr√©d√©finies </h2>';


// --------------------------------
// Affichage de la date

echo "<br> Date: <br>";
echo date("d/m/Y") . "<br>";
// la fonction pr√©d√©finie date() permet d'acc√©der √† un √©l√©ment li√© √† la date selon les arguments qu'on lui envoie.
// Ici d = le jour (19), m = le mois (12), Y = l'ann√©e (2022)


// Par d√©faut, date() affiche les √©l√©ments de date du moment o√π le code est ex√©cut√©. 
// Pour en savoir plus : https://www.php.net/manual/fr/function.date.php





// --------------------------------
// Traitement des chaines


$email1 = "contactd-aly@outlook.fr";

echo strpos($email1, "@") . "<br>";
// indique 7 (on commence √† 0)

// strpos() permet de chercher la position d'une chaine dans une autre chaine


$email2 = "bonjour";

echo strpos($email2, "@");
// rien ne s'affiche parce qu'il n'y a pas d'arobase dans "bonjour"

var_dump(strpos($email2, "@"));
// gr√¢ce au var_dump() on peut voir qu'en fait la fonction renvoie bien une valeur. Elle renoie un bool√©en FALSE et pas juste aucun valeur. 
// var_dump() est une instruction d'affichage am√©lior√©e qu'on utilise UNIQUEMENT en phase d√©veloppement 

// var_dump() affiche les informations d'une variable (dont le type et la valeur)

echo "<br>";


// --------------------------------
// Traitement des chaines 2


$phrase = "Ceci est une phrase ! ";

echo strlen($phrase) . "<br>"; //affiche 22

// strlen() compte le nombre de caract√®res dans une chaine



// --------------------------------


echo '<hr><h2 id="part10"> 10. Fonctions utilisateurs </h2>';

// les fonctions utilisateur ne sont pas pr√©d√©finies dans le langage et son d√©clar√©es puis ex√©cut√©es par l'utilisatrice ou l'utilisateur



// d√©claration

function separation(){
	echo "<hr><hr><hr>";
}
// la fonction separation() permet d'afficher trois traits de s√©parations √† son ex√©cution, elle ne demande pas d'argument


//ex√©cution 

separation();
// pour ex√©cuter une fonction il suffit de la nommer dans le document apr√®s l'avoir d√©clar√©e.


// --------------------------------
// fonction avec argument(s) : les arguments sont des param√®tres fournis √† la fonction et lui permettent de compl√©ter ou modifier son comportement initialement pr√©vu


// d√©claration

function bonjour($nom){ //$nom est une variable de r√©ception. Elle permet de symboliser le comportement que la fonction aura avec l'argument. (elle peut √™tre nomm√©e n'importe comment tant qu'on reste coh√©rents)
	return "Bonjour $nom. <br>";
}


$prenom = "Monica";

//ex√©cution
echo bonjour("Rachel");
// s'il y a un return dans la fonction, il faudra l'ex√©cuter dans un echo pour avoir un affichage
echo bonjour('Phoebe');
echo bonjour($prenom);
// on peut bien s√ªr envoyer une variable en argument

// --------------------------------

function appliqueTVA($prix){
	return $prix * 1.2;
}

echo appliqueTVA(90) . "<br>";


//------------

//Exercice : Pourriez-vous am√©liorer cette fonction afin que l'on puisse calculer un nombre avec les taux de notre choix (19.6%, 5.5%, 7%). (Testez votre fonction avec plusieurs valeurs pour v√©rifier que √ßa fonctionne !)
// Pour cela cr√©ez une fonction appliqueTVA2()

function appliqueTVA2($prix, $taux = 20){ // argument initalis√© par d√©faut si l'on ne l'envoie pas - on le rend optionnel
	return $prix * $taux/100 + $prix;
}

echo "10 euros avec une tva de 20% font : " . appliqueTVA2(10, 20) . ".<br>";
echo "75 euros avec une tva de 5.5% font : " . appliqueTVA2(75, 5.5) . ".<br>";
echo "10 euros avec une tva de 20% font : " . appliqueTVA2(10) . ".<br>";

// Attention : on a nomm√© notre fonction appliqueTVA2() parce que deux fonctions ne doivent pas poss√©der le m√™me nom. 

// --------------------

function jourSemaine(){
	$jour = "mardi";
	return $jour;
}

echo jourSemaine() . "<br>"; //affiche bien mardi
// echo $jour; //fait une erreur, la variable n'est pas d√©finie

// $jour est une variable locale, elle est accessible uniquement dans la fonction o√π elle a √©t√© d√©clar√©e. Pour acc√©der √† sa valeur, il faut forc√©ment passer par une ex√©cution de la fonction.

$pays = "France"; // variable globale

function affichagePays(){
	global $pays;
	// pour utiliser une variable globale dans le local (la fonction), il faut utiliser le mot cl√© global pour appeler la variable
	echo $pays . "<br>";
}

affichagePays(); 
// affiche bien le contenu de la variable gr√¢ce au mot cl√© global


// ----------------

function identite(string $nom, int $age){
	return $nom . " a " . $age . " ans ! <br>";
}

echo identite("Magali", 35);

// On peut pr√©ciser en amont le type obligatoire des valeurs entrantes dans les arguments. C'est une bonne habitude √† prendre pour la s√©curisation des donn√©es ! Ici, si je mets un chiffre √† la place du nom, j'ai une erreur. 



// --------------------------------


echo '<hr><h2 id="part11"> 11. Structures it√©ratives : Boucles</h2>';


// it√©ration = action de r√©p√©ter une action en math√©matiques


// boucle while

$i = 0;

while ($i < 3){ // tant que $i est inf√©rieure √† 3
	echo "$i..."; //on affiche la valeur de $i
	$i++; // on incr√©mente $i ( c'est √† dire, on augmente $i de 1, $i++ revient √† faire $i = $i + 1)
}

// Quand $i passe √† trois, on ne peut plus valider la condition de la boucle, donc on arr√™te le traitement

echo "<br>";


// -----------------

// boucle for 


for ($j = 0; $j < 16; $j++){
	// valeur de d√©part ; condition d'entr√©e dans la boucle ; sens (incr√©mentation ou d√©cr√©mentation)
	echo $j . "<br>";
}

?>

<!-- D√©mo d'un select pour l'exercice suivant -->

<select>
	<option>1</option>
	<option>2</option>
	<option>3</option>
</select><br>


<?php

// Exercice : afficher 31 options dans un select (de 0 √† 30) via une boucle. 

echo '<select>';

for($j = 0; $j < 31; $j++){
	echo "<option>$j</option>";
}

echo '</select><br>';

// ----------------

// Exercice : Faites une boucle qui affiche de 9 √† 0 sur une m√™me ligne

$i = 9;

while ($i >= 0){
	echo $i . " ";
	$i--;
}

// Exercice : Faites une boucle qui affiche de 0 √† 9 sur une m√™me ligne dans une table HTML

?>

<!-- exemple de table HTML -->

<table border="1">
	<tr>
		<td>cellule 1</td>
		<td>cellule 2</td>
		<td>cellule 3</td>
	</tr>
	<tr>
		<td>cellule 4</td>
		<td>cellule 5</td>
		<td>cellule 6</td>
	</tr>
</table>

<?php


echo '<table border="1"><tr>';

for ($i = 0; $i <= 9; $i++){
	echo '<td>' . $i . '</td>';
}

echo '</tr></table><br>';

// -------------

// Exercice : Faire la m√™me chose en allant de 0 √† 99 sur plusieurs lignes sans faire une boucle par ligne. (Il faut faire le moins de boucles possibles. )


// Boucle imbriqu√©e -- m√©thode 1


$z = 0;

echo '<table border="2">';

for ($ligne = 0; $ligne < 10; $ligne++){ //on cr√©e les lignes du tableau gr√¢ce √† cette boucle
	echo "<tr>"; //√† chaque tour de cette boucle, on cr√©e une ligne puis on essaie d'entrer dans la deuxi√®me boucle
	for ($cellule = 0; $cellule < 10; $cellule++){ //la deuxi√®me boucle cr√©e les cellules dans chaque ligne
		echo "<td> $z </td>";
		$z++;
		// a chaque cr√©ation de cellule, on affiche la valeur de $z puis on l'incr√©mente
	}
	echo "</tr>";
}

echo '</table><br>';



// boucle imbriqu√©e -- m√©thode 2

echo '<table border ="2">';

for ($ligne = 0; $ligne < 10; $ligne++ ){//on cr√©e nos lignes comme dans la boucle pr√©c√©dente
	echo "<tr>";
		for ($cellule = 0; $cellule < 10; $cellule++ ){//on cr√©e nos cellules aussi de la m√™me fa√ßon
			echo "<td>" . (10 * $ligne + $cellule) . "</td>";
			// on acc√®de au contenu en faisant un calcul : 10 * la valeur de la ligne + la valeur de cellule. 
		}
	echo "</tr>";
}

echo '</table><br>';


// boucle imbriqu√©e -- m√©thode

$i = 0;

echo '<table border="2">';

while ($i < 99){
	echo "<tr>";
		for ($k = 0; $k <= 9; $k++ ){
			echo "<td>$i</td>";
			$i++;
		}
	echo "</tr>";
}

echo '</table><br>';


// Exercice affichage :

// Cr√©ez un dossier /img/ dans votre dossier de cours. Dedans, vous allez enregistrer 5 images qui auront la m√™me extension (.jpg par exemple) et que vous appellerez image1.jpg, image2.jpg etc. 
// Cr√©ez un affichage automatis√© de ces images dans ce document. (deux lignes de code)

for($i = 1; $i < 5; $i++){
	echo '<img src="img/image' . $i . '.jpg" alt="" width="150px">';
}


// --------------------------------


echo '<hr><h2 id="part12"> 12. Inclusions de fichiers</h2>';


// cr√©ation d'un fichier exemple.inc.php avec seulement du texte √† l'int√©rieur

echo "<strong>Premi√®re fois </strong>: <br>";
include("exemple.inc.php");
echo "<br>";
// include() est une fonction pr√©d√©f√©nie qui permet d'importer le contenu d'un autre fichier. 


echo "<strong>Deuxi√®me fois </strong>: <br>";
include_once("exemple.inc.php");
echo "<br>";
// include_once() fonctionne comme include() sauf que si le contenu a d√©j√† √©t√© import√©, alors include_once() ne l'importe pas.


echo "<strong>Troisi√®me fois </strong>: <br>";
require("exemple.inc.php");
echo "<br>";
// require() fonctionne comme include


echo "<strong>Quatri√®me fois </strong>: <br>";
require_once("exemple.inc.php");
echo "<br>";
// require_once() fonctionne comme require_once()


/*

	Diff√©rence entre require et include, s'il y a une erreur sur le chemin vers le fichier qu'on veut inclure :
		- include fait une erreur et continue l'ex√©cution du code
		- require fait une erreur et stoppe l'ex√©cution du code

*/


// --------------------------------

echo '<hr><h2 id="part13"> 13. Tableaux de donn√©es ARRAY</h2>';

// un tableau ARRAY est une variable qui contient plusieurs valeurs organis√©es sous forme indice => valeur

$liste = array("Homer", "Marge", "Bart", "Lisa", "Maggie");

// echo $liste; 
// echo ne peut pas afficher les valeurs contenues dans un tableau array

// dans l'environnement de dev (ce qui n'est pas vu par l'utilisatrice ou l'utilisateur)
print_r($liste);
// print_r() permet d'acc√©der aux valeurs et indices contenus dans le tableau array. (Rappel : on n'utilise jamais de print_r() pour afficher dans l'environnement de prod - pour les utilisatrices et utilisateurs)


// avec mise en page
echo "<pre>";
print_r($liste);
echo "</pre>";

// pre est une balise HTML permettant de formater le texte, ici √ßa nous met en forme la sortie du print_r() en mettant le tableau √† la verticale



echo "<pre>";
var_dump($liste);
echo "</pre>";

// var_dump() affiche le contenu du tableau en ajoutant certaines informations comme le type des variables, la longueur du tableau...


// -------------

$couleur = array("j" => "jaune", "b" => "bleu", "v" => "violet");

echo "<pre>";
print_r($couleur);
echo "</pre>";

// on peut si on le souhaite cr√©er nous-m√™me les indices li√©s √† nos valeurs.

echo "taille du tableau : " . count($couleur) . "<br>";
echo "taille du tableau : " . sizeof($couleur) . "<br>";
// count() et sizeof() permettent de compter les lignes d'un tableau

echo implode(" - ", $couleur) . "<br>";
// implode() permet d'afficher sous forme de chaine de caract√®re les valeurs contenues dans un tableau, s√©par√©es par un s√©parateur (1er argument)


echo $couleur["b"];



// --------------------------------

echo '<hr><h2 id="part14"> 14. Boucles FOREACH pour les tableaux de donn√©es ARRAY</h2>';

// foreach est une boucle qui permet de passer en revue le contenu d'un tableau ou d'un objet. Si on essaie de l'utiliser sur un autre type de variable, √ßa ne marchera pas. 

$tab[] = "France";
// je dis que j'affecte √† la variable $tab qui est un tableau array la valeur France

$tab[] = "Italie";
$tab[] = "Espagne";
$tab[] = "Angleterre";
$tab[] = "Portugal";

echo "<pre>";
print_r($tab);
echo "</pre>";


foreach ($tab as $valeur){
	// le mot as est un mot cl√© qui permet de dire au foreach quoi utiliser comme symbole des valeurs
	// nom du tableau as variable qui repr√©sente les valeurs
	echo $valeur . "<br>";
}

foreach ($tab as $indice => $valeur){
	// nom du tableau as variable qui repr√©sente les indices => variable qui repr√©sente les valeurs
	echo $indice . " - " . $valeur . "<br>";
}

//------------------------------------------------------

	// EXERCICE

//------------------------------------------------------
echo'<hr> <h3> Exercice Array</h3>';

// Cr√©ez un tableau array qui contien en indice le pr√©nom d'une c√©l√©brit√© et en valeur son nom de famille. (5 ou 6 c√©l√©brit√©s)
// Gr√¢ce √† un foreach, affichez le pr√©nom et le nom de chaque c√©l√©brit√© avec un retour √† la ligne entre chaque personne. 


$celebrites = ["vin" => "diesel", "michelle" => "rodriguez", "tyrese" => "gibson", "jordana" => "brewster", "charlize" => "theron"];

foreach ($celebrites as $prenom => $nom){
	echo $prenom . " " . $nom . "<br>";
}

// --------------------------------

echo '<hr><h2 id="part15"> 15. Tableaux multidimensionnels</h2>';


$tab_multi= array(0 => array("prenom" => "Tony", "nom" => "Stark", "super" =>"Iron Man"), 1 => array("prenom" => "Natasha", "nom" => "Romanoff", "super" => "Black Widow"));

echo "<pre>";
print_r($tab_multi);
echo "</pre>";

// Un tableau multidimensionnel est un tableau qui contient lui-m√™me un ou des tableaux. Il peut y avoir plusieurs niveaux de profondeur. 


echo $tab_multi[0]['super'] . "<br>";
// on peut naviguer dans un tableau multidimensionnel gr√¢ce √† ses indices


for ($i = 0; $i < sizeof($tab_multi); $i++){
	echo $tab_multi[$i]['prenom'] . " ". $tab_multi[$i]['nom'] . " est " . $tab_multi[$i]['super'] . " ! <br>";
}


// --------------------------------

echo '<hr><h2 id="part16"> 16. Classes et Objets</h2>';

// Un objet est un autre type de donn√©es. Il permet de regrouper des informations. Il est plus complexe qu'un ARRAY parce qu'il peut regrouper des variables mais aussi des fonctions.
// En objet, les variables sont appel√©es attributs ou propri√©t√©s, les fonctions sont appel√©es m√©thodes.

// Pour cr√©er un objet, on doit d'abord cr√©er un "mod√®le", c'est la classe.
// Une classe permet de d√©finir ce qu'un objet contiendra. Une classe est comme un plan de construction, l'objet est la maison qui est construite. A partir du m√™me plan, de la m√™me classe, on peut cr√©er plusieurs maisons, plusieurs objets.

class Etudiant{
	public $prenom = "Julien";
	// public permet de pr√©ciser que l'√©l√©met sera accessible de partout dans le code (il y a aussi protected et private que nous verrons dans le cours de POO).
	public $age = 25;
	public function pays(){
		return "France";
	}
}

// la classe Etudiant est le mod√®le, nous allons maintenant cr√©er un objet issu de cette classe

$objet = new Etudiant;
// new est le mot cl√© qui permet d'instancier la classe et d'en faire une objet. C'est ce qui nous permet de nous servir des informations et m√©thodes contenues dans l'objet. On ne se sert de ce qui est dans la classe que via l'objet. La classe est le mod√®le, l'objet est une version de ce mod√®le.
// Ici $objet est un objet de la classe Etudiant

// echo $objet;
// comme pour les array, on ne peut pas faire un echo simple de l'objet

echo "<pre>";
var_dump($objet);
echo "</pre>";
// avec un var_dump nous pouvons acc√©der aux attributs publics uniquement, le reste est "cach√©

echo $objet->prenom . "<br>";
echo $objet->age . "<br>";
// on peut acc√©der aux donn√©es avec cette syntaxe. Attention, on n'utilise pas le symbole $ dans ce cas
echo $objet->pays() . "<br>";
// on ex√©cute la m√©thode contenue dans l'objet


/*
	Contexte : Sur un site, une classe panier contiendra :
		- toutes le m√©thodes utiles au panier : ajouterArticle(), retirerArticle(), validerPaiement(), calculerTotal()...
		- tous les attributs en rapport avec le panier : $nombreArticles, $prixUnitaire, $prixTotal, $quantite...
	L'objet sera le panier lui-m√™me avec ses fonctionnalit√©s. 

*/

// Exercice : 
// Cr√©ez une classe "ApprenantDev" qui permettra d'enregistrer le nom et le pr√©nom de la personne, son √¢ge, son ancien m√©tier, ses notes durant la formation. Cr√©ez aussi une fonction qui selon ce que l'apprenant-e est en train d'apprendre, affichera une phrase disant "Bonne chance pour le [langage en cours] !" (par exemple cette semaine √ßa dirait "Bonne chance pour le PHP !")
// Affichez ensuite ces informations dans le navigateur (pas avec un var_dump())
// pour cet exemple, vous pouvez mettre les informations directement dans la classe, nous verrons la version plus complexe en POO

class ApprenantDev{
	public $nom = "Magali Milbergue";
	public $age = 35;
	public $ancienMetier = "Travaileuse social";
	public $notes = ["html/css" => "A", "javaScript" => "C", "PHP" => "A"];

	public function messageEncouragement($langage){
		return "Bonne chance pour le $langage ! <br>";
	}
}

$apprenante = new ApprenantDev();

echo $apprenante->nom . "<br>";
echo $apprenante->age . "<br>";
echo $apprenante->ancienMetier . "<br>";


foreach ($apprenante->notes as $indice => $valeur){
	echo $indice . " = " . $valeur . "<br>";
}

echo $apprenante->messageEncouragement("PHP");



// --------------------------------

echo '<hr><h2 id="part17"> 17. Superglobales </h2>';

// les superglobales sont des tableaux array pr√©d√©finis par PHP qui sont toujours disponibles, quel que soit le contexte (global ou local)
// Elles s'√©crivent en majuscules et commencent par un underscore ("_"). (Sauf la superglobale $GLOBALS)

echo '<pre>';
print_r($GLOBALS);
echo '</pre>';

// GLOBALS contient toutes les variables du contexte global
// Ici, elle affiche toutes les variables utilis√©es dans ce cours
// Elle contient aussi les superglobales et elle-m√™me (d'o√π le terme "r√©cursion" pr√©cis√© dans son affichage) (r√©cursion = quand une chose se d√©finie en elle-m√™me)

// --------------------------------

echo '<hr><h2 id="part18"> 18. La superglobale GET </h2>';

// Pour ce cours nous allons cr√©er un sous-dossier /get/ et dans un premier temps nous allons y cr√©er un fichier page1.php et un fichier page2.php, c'est dans ces fichiers que nous allons continuer le cours. 


// Cr√©ez un fichier exercice-multilingue.php dans votre dossier /get/, vous y trouverez la suite du cours sous forme d'exercice. 

// Cr√©ez un fichier exercice-darkmode.php dans le dossier /get/, vous y trouverez la suite du cours sous forme d'exercice.


// --------------------------------

echo '<hr><h2 id="part19"> 19. La superglobale POST </h2>';

// cr√©ez un dossier /post/ dans le dossier de cours et cr√©ez un fichier formulaire1.php, c'est l√† que continuera le cours. 

// cr√©ez un fichier formulaire2.php dans votre dossier /post/, vous y trouverez la suite du cours (sous forme d'exercice)

// Cr√©ez les fichiers formulaire3.php et formulaire4.php dans le dossier /post/, vous y trouverez la suite du cours. 

// Cr√©ez le fichier lecture.php dans le dossier /post/, vous y trouverez la suite du cours

// Cr√©ez le fichier formulaire-mail.php dans le dossier /post/, vous y trouverez la suite du cours.


//------------------------------------------------------


echo '<hr><h2 id="part20"> 20. Cookies üç™ </h2>';

// Cr√©ez un dossier /cookies/ dans lequel vous allez cr√©er un fichier pays.php, c'est dans ce fichier que se trouvera le cours. 


//------------------------------------------------------


echo '<hr><h2 id="part21"> 21. Sessions </h2>';

// cr√©ez un dossier /sessions/ dans lequel vous allez cr√©er un fichier session1.php, vous y trouverez le d√©but du cours. 

// cr√©ez un fichier session2.php, vous trouverez la suite du cours


//------------------------------------------------------


echo '<hr><h2 id="part22"> 22. PDO </h2>';

// Cr√©ez un dossier /pdo/ dans le dossier de cours et dedans cr√©ez un fichier pdo.php c'est l√† que commencera cette partie du cours

// Cr√©ez un fichier dialogue-et-faille-securite.php dans le dossier /pdo/, c'est la que vous trouverez la suite du cours. 


//------------------------------------------------------

echo'<hr> <h3>Exercice : salade de fruits !</h3>';

// Cr√©ez un dossier /fruits/ dans lequel on va cr√©er un premier fichier fonction.inc.php c'est l√† que se trouvera le premier exerice √† faire
// Cr√©ez un fichier appel.php dans le dossier /fruit/ pour l'exercice suivant
// Cr√©ez un fichier liens_fruits.php dans le dossier /fruit/ pour le troisi√®me exercice
// Cr√©ez un fichier tableau.php dans votre dossier /fruit/ pour le quatri√®me exercice
// Cr√©eez un fichier formulaire.php dans le dossiert /fruit/ pour le dernier exercice (avec formulaire-correction pour la correction)











echo '<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>';